{"entries":[{"timestamp":1727800334990,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let soundPlayed = false;\nlet StartupPlayed = false;\n\nclass SendDirection {\n    public MoveDirection: string;\n    public isControllerOnline: boolean;\n    public ledState: string;\n\n    // Constructor with default values only for boolean and null\n    constructor(moveDirection: string = \"None\", isOnline: boolean = false, ledState: string = \"Off\") {\n        this.MoveDirection = moveDirection;\n        this.isControllerOnline = isOnline; // This can be true or false\n        this.ledState = ledState;\n    }\n\n    public updateDirection(newDirection: string) {\n        this.MoveDirection = newDirection;\n        console.log(`Direction updated to: ${newDirection}`);\n    }\n\n    public sendCommand(command: string) {\n        console.log(`Broadcasting command: ${command}`);\n        radio.sendString(command);\n    }\n\n    public toggleControllerStatus() {\n        this.isControllerOnline = !this.isControllerOnline;\n        console.log(`Controller online status: ${this.isControllerOnline}`);\n    }\n}\n\nfunction PlaySound(Sound: any) {\n    console.log(\"PlaySound called with argument: \" + Sound);\n\n    if (typeof Sound === \"string\") {\n        if (Sound === \"Beep\") {\n            console.log(\"Sound is 'Beep'\");\n            if (!soundPlayed) {\n                console.log(\"Beep sound not played yet, playing sound...\");\n                soundPlayed = true;\n                music.playTone(Note.A, 500);\n                pause(500);\n                music.playTone(Note.B, 500);\n            } else {\n                console.log(\"Beep sound already played, skipping...\");\n            }\n        } else if (Sound === \"Startup\") {\n            console.log(\"Sound is 'Startup'\");\n            if (!StartupPlayed) {\n                console.log(\"Startup sound not played yet, starting loading animation...\");\n                StartupPlayed = true;\n\n                for (let i = 0; i < 3; i++) {\n                    console.log(\"Loading animation frame \" + (i + 1));\n                    basic.showLeds(`\n                        . . # . .\n                        . # . # .\n                        # . . . #\n                        . # . # .\n                        . . # . .\n                    `);\n                    basic.pause(200);\n                    basic.showLeds(`\n                        . # . # .\n                        # . . . #\n                        . . . . .\n                        # . . . #\n                        . # . # .\n                    `);\n                    basic.pause(200);\n                    basic.showLeds(`\n                        # . . . #\n                        . # . # .\n                        . . # . .\n                        . # . # .\n                        # . . . #\n                    `);\n                    basic.pause(200);\n                }\n\n                console.log(\"Startup sound playing...\");\n                music.playTone(Note.A, 500);\n                music.playTone(Note.B, 500);\n                music.playTone(Note.C, 500);\n\n                console.log(\"Displaying 'Yes' icon...\");\n                basic.showIcon(IconNames.Yes);\n                pause(100);\n                basic.clearScreen();\n            } else {\n                console.log(\"Startup sound already played, skipping...\");\n            }\n        }\n    } else {\n        console.log(\"Invalid sound type, showing error code...\");\n        basic.showString(\"Error Code:\");\n        pause(100);\n        basic.showNumber(23);\n        basic.clearScreen();\n    }\n}\n\nfunction move(direction: ArrowNames, action: () => void) {\n    console.log(\"Moving in direction: \" + direction);\n    basic.showArrow(direction);\n    basic.pause(1000);\n    basic.clearScreen();\n    action();\n}\n\nfunction runSafely(fn: any, fnName = \"anonymous\") {\n    try {\n        console.log(`Running function: ${fnName}`);\n        fn();\n        console.log(`Function ${fnName} executed successfully.`);\n    } catch (error) {\n        console.error(`Error in function ${fnName}: ${error.message}`);\n    }\n}\n\nfunction checkForErrors() {\n    runSafely(() => PlaySound(\"Startup\"), \"PlaySound\");\n}\n\ncheckForErrors();\n\nrunSafely(() => {\n    console.log(\"Setting radio group to 2...\");\n    radio.setGroup(2);\n}, \"Setting radio group\");\n\n// Example usage of SendDirection\n// const controller = new SendDirection();\n\n// Function to check for tilt and send command\n// function checkTilt() {\n//     const tiltThreshold = 300; // Adjust this value based on your sensitivity preference\n\n//     // Check if the device is tilted forward\n//     if (input.acceleration(Dimension.Y) < -tiltThreshold) {\n//         controller.updateDirection(\"Forward\");\n//         controller.sendCommand(\"StartMoveForward\");\n//     }\n// }\n\n// Main loop to continuously check for tilt\n// basic.forever(() => {\n//     checkTilt();\n//     basic.pause(200); // Check every 200 ms\n// });"],[0,"\n"]],"start1":0,"start2":0,"length1":4803,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":211,"start2":211,"length1":52,"length2":8},{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":283,"start2":283,"length1":11,"length2":42}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1727800334989,"editorVersion":"7.0.42","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"DriveController\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727800933910}